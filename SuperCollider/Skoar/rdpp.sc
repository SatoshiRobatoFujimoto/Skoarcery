// ===============================================================================================================================
// rdpp.sc - Generated by Code_Parser_Sc - Create Recursive Descent Predictive Parser on 2015-12-08 12:12:44 for SuperCollider 3.7
// ===============================================================================================================================

SkoarParseException : Exception {

}

SkoarParser {

    var <runtime, <toker, <deep, desirables;

    *new {
        | runtime |
        ^super.new.init( runtime )
    }

    init {
        | runtime |

        runtime = runtime;
        toker = runtime.toker;
        deep = 0;
        desirables = IdentityDictionary();
        this.init_desirables();
    }

    fail {
        toker.dump;
        SkoarParseException("Fail").throw;
    }

    fail_too_deep {
        "Parse tree too deep!".postln;
        toker.dump;
        SkoarParseException("Parse tree too deep").throw;
    }


    //print {
    //    | line, end |
    //    (line ++ end).postln;
    //}

    init_desirables {

        // expr
        desirables.put('expr -> msgable expr_prime', [Toke_Cat, Toke_OttavaB, Toke_Symbol, Toke_Choard, Toke_Deref,
                   Toke_Caesura, Toke_OctaveShift, Toke_DynSFZ, Toke_NamedNoat, Toke_String,
                   Toke_LWing, Toke_OttavaA, Toke_False, Toke_DynForte, Toke_ListS,
                   Toke_QuindicesimaB, Toke_PedalDown, Toke_Int, Toke_Carrot, Toke_SkoarpionStart,
                   Toke_DynPiano, Toke_True, Toke_Tuplet, Toke_CondS, Toke_PedalUp,
                   Toke_CutsS, Toke_QuindicesimaA, Toke_Rep, Toke_HashLevel, Toke_Float,
                   Toke_Freq, Toke_Portamento, Toke_Loco, Toke_LoopS, Toke_DynFP,
                   Toke_Fairy]);

        // deref
        desirables.put('deref -> Deref deref_prime', [Toke_Deref]);

        // branches
        desirables.put('branches -> branch branches', [Toke_Volta, Toke_Cat, Toke_OttavaB, Toke_Symbol, Toke_Choard,
                   Toke_Deref, Toke_Caesura, Toke_Segno, Toke_OctaveShift, Toke_Slash,
                   Toke_DynSFZ, Toke_String, Toke_NamedNoat, Toke_LWing, Toke_OttavaA,
                   Toke_False, Toke_Quarters, Toke_Bars, Toke_ListS, Toke_Meter,
                   Toke_DynForte, Toke_QuindicesimaB, Toke_PedalDown, Toke_Int, Toke_Carrot,
                   Toke_SkoarpionStart, Toke_DalSegno, Toke_DynPiano, Toke_True, Toke_Newline,
                   Toke_Tuplet, Toke_Coda, Toke_DaCapo, Toke_CondS, Toke_PedalUp,
                   Toke_Comment, Toke_Eighths, Toke_CutsS, Toke_Voice, Toke_QuindicesimaA,
                   Toke_Rep, Toke_Fine, Toke_Crotchets, Toke_HashLevel, Toke_Float,
                   Toke_Quavers, Toke_Freq, Toke_Portamento, Toke_Loco, Toke_LoopS,
                   Toke_DynFP, Toke_Fairy]);

        // optional_voice
        desirables.put('optional_voice -> Voice', [Toke_Voice]);

        // optional_al_coda
        desirables.put('optional_al_coda -> AlCoda', [Toke_AlCoda]);

        // opt_arg_spec
        desirables.put('opt_arg_spec -> ArgSpec', [Toke_ArgSpec]);

        // skoar
        desirables.put('skoar -> branches', [Toke_Volta, Toke_Cat, Toke_OttavaB, Toke_Symbol, Toke_Choard,
                   Toke_Deref, Toke_Caesura, Toke_Segno, Toke_OctaveShift, Toke_Slash,
                   Toke_DynSFZ, Toke_String, Toke_NamedNoat, Toke_LWing, Toke_OttavaA,
                   Toke_False, Toke_Quarters, Toke_Bars, Toke_ListS, Toke_Meter,
                   Toke_DynForte, Toke_QuindicesimaB, Toke_PedalDown, Toke_Int, Toke_Carrot,
                   Toke_SkoarpionStart, Toke_EOF, Toke_DalSegno, Toke_DynPiano, Toke_True,
                   Toke_Newline, Toke_Tuplet, Toke_Coda, Toke_DaCapo, Toke_CondS,
                   Toke_PedalUp, Toke_Comment, Toke_Eighths, Toke_CutsS, Toke_Voice,
                   Toke_QuindicesimaA, Toke_Rep, Toke_Fine, Toke_Crotchets, Toke_HashLevel,
                   Toke_Float, Toke_Quavers, Toke_Freq, Toke_Portamento, Toke_Loco,
                   Toke_LoopS, Toke_DynFP, Toke_Fairy]);

        // if_body
        desirables.put('if_body -> phrases', [Toke_Volta, Toke_Cat, Toke_CondIf, Toke_OttavaB, Toke_Symbol,
                   Toke_Choard, Toke_Deref, Toke_Caesura, Toke_Segno, Toke_OctaveShift,
                   Toke_Slash, Toke_DynSFZ, Toke_String, Toke_NamedNoat, Toke_LWing,
                   Toke_OttavaA, Toke_False, Toke_Quarters, Toke_Bars, Toke_ListS,
                   Toke_Meter, Toke_DynForte, Toke_QuindicesimaB, Toke_PedalDown, Toke_Int,
                   Toke_Carrot, Toke_SkoarpionStart, Toke_DalSegno, Toke_DynPiano, Toke_True,
                   Toke_Newline, Toke_Tuplet, Toke_Coda, Toke_CondE, Toke_DaCapo,
                   Toke_CondS, Toke_PedalUp, Toke_Comment, Toke_Eighths, Toke_CutsS,
                   Toke_QuindicesimaA, Toke_Rep, Toke_Fine, Toke_Crotchets, Toke_HashLevel,
                   Toke_Float, Toke_Quavers, Toke_Freq, Toke_Portamento, Toke_Loco,
                   Toke_LoopS, Toke_DynFP, Toke_Fairy]);

        // pedally
        desirables.put('pedally -> PedalDown', [Toke_PedalDown]);
        desirables.put('pedally -> PedalUp', [Toke_PedalUp]);

        // ottavas
        desirables.put('ottavas -> OctaveShift', [Toke_OctaveShift]);
        desirables.put('ottavas -> OttavaA', [Toke_OttavaA]);
        desirables.put('ottavas -> OttavaB', [Toke_OttavaB]);
        desirables.put('ottavas -> QuindicesimaA', [Toke_QuindicesimaA]);
        desirables.put('ottavas -> QuindicesimaB', [Toke_QuindicesimaB]);
        desirables.put('ottavas -> Loco', [Toke_Loco]);

        // nouny_literal
        desirables.put('nouny_literal -> Tuplet', [Toke_Tuplet]);
        desirables.put('nouny_literal -> Caesura', [Toke_Caesura]);
        desirables.put('nouny_literal -> Freq', [Toke_Freq]);
        desirables.put('nouny_literal -> Int', [Toke_Int]);
        desirables.put('nouny_literal -> Float', [Toke_Float]);
        desirables.put('nouny_literal -> String', [Toke_String]);
        desirables.put('nouny_literal -> Choard', [Toke_Choard]);
        desirables.put('nouny_literal -> NamedNoat', [Toke_NamedNoat]);
        desirables.put('nouny_literal -> Symbol', [Toke_Symbol]);
        desirables.put('nouny_literal -> Fairy', [Toke_Fairy]);
        desirables.put('nouny_literal -> HashLevel', [Toke_HashLevel]);
        desirables.put('nouny_literal -> False', [Toke_False]);
        desirables.put('nouny_literal -> True', [Toke_True]);
        desirables.put('nouny_literal -> Cat', [Toke_Cat]);

        // skrp_sig
        desirables.put('skrp_sig -> ArgSpec SkoarpionSep', [Toke_ArgSpec]);
        desirables.put('skrp_sig -> SymbolName opt_arg_spec SkoarpionSep', [Toke_SymbolName]);

        // deref_prime
        desirables.put('deref_prime -> MsgNameWithArgs listy_suffix', [Toke_MsgNameWithArgs]);
        desirables.put('deref_prime -> MsgName', [Toke_MsgName]);

        // cthulhu
        desirables.put('cthulhu -> LWing Semicolon cthulhu_prime', [Toke_LWing]);

        // cuts
        desirables.put('cuts -> CutsS phrases CutsE', [Toke_CutsS]);

        // moar_listy_entries
        desirables.put('moar_listy_entries -> ListSep listy_entries', [Toke_ListSep]);
        desirables.put('moar_listy_entries -> Newline', [Toke_Newline]);

        // cond_ifs
        desirables.put('cond_ifs -> cond_if cond_ifs_suffix', [Toke_Cat, Toke_OttavaB, Toke_Symbol, Toke_Choard, Toke_Deref,
                   Toke_Caesura, Toke_OctaveShift, Toke_DynSFZ, Toke_NamedNoat, Toke_String,
                   Toke_LWing, Toke_OttavaA, Toke_False, Toke_DynForte, Toke_ListS,
                   Toke_QuindicesimaB, Toke_PedalDown, Toke_Int, Toke_Carrot, Toke_SkoarpionStart,
                   Toke_DynPiano, Toke_True, Toke_Tuplet, Toke_CondS, Toke_PedalUp,
                   Toke_CutsS, Toke_Voice, Toke_QuindicesimaA, Toke_Rep, Toke_HashLevel,
                   Toke_Float, Toke_Freq, Toke_Portamento, Toke_Loco, Toke_LoopS,
                   Toke_DynFP, Toke_Fairy]);

        // cond_else
        desirables.put('cond_else -> CondIf if_body', [Toke_CondIf]);

        // musical_keyword_misc
        desirables.put('musical_keyword_misc -> Rep', [Toke_Rep]);
        desirables.put('musical_keyword_misc -> Portamento', [Toke_Portamento]);
        desirables.put('musical_keyword_misc -> Carrot', [Toke_Carrot]);

        // loop_condition
        desirables.put('loop_condition -> LoopSep boolean_expr', [Toke_LoopSep]);

        // expr_prime
        desirables.put('expr_prime -> assignment expr_prime', [Toke_AssOp]);
        desirables.put('expr_prime -> math expr_prime', [Toke_MathOp]);
        desirables.put('expr_prime -> boolean', [Toke_BooleanOp]);
        desirables.put('expr_prime -> times', [Toke_Times]);

        // skrp_suffix
        desirables.put('skrp_suffix -> skrp_lines SkoarpionEnd', [Toke_Volta, Toke_Cat, Toke_OttavaB, Toke_Symbol, Toke_Choard,
                   Toke_Deref, Toke_Caesura, Toke_Segno, Toke_OctaveShift, Toke_Slash,
                   Toke_DynSFZ, Toke_String, Toke_NamedNoat, Toke_LWing, Toke_OttavaA,
                   Toke_SkoarpionEnd, Toke_False, Toke_Quarters, Toke_Bars, Toke_ListS,
                   Toke_Meter, Toke_DynForte, Toke_QuindicesimaB, Toke_PedalDown, Toke_Int,
                   Toke_Carrot, Toke_SkoarpionStart, Toke_DalSegno, Toke_DynPiano, Toke_True,
                   Toke_Newline, Toke_Tuplet, Toke_Coda, Toke_DaCapo, Toke_CondS,
                   Toke_PedalUp, Toke_Comment, Toke_Eighths, Toke_CutsS, Toke_Voice,
                   Toke_QuindicesimaA, Toke_Rep, Toke_Fine, Toke_Crotchets, Toke_HashLevel,
                   Toke_Float, Toke_Quavers, Toke_Freq, Toke_Portamento, Toke_Loco,
                   Toke_LoopS, Toke_DynFP, Toke_Fairy]);

        // nouny
        desirables.put('nouny -> cthulhu', [Toke_LWing]);
        desirables.put('nouny -> cuts', [Toke_CutsS]);
        desirables.put('nouny -> conditional', [Toke_CondS]);
        desirables.put('nouny -> loop', [Toke_LoopS]);
        desirables.put('nouny -> nouny_literal', [Toke_Cat, Toke_True, Toke_Tuplet, Toke_Symbol, Toke_Choard,
                   Toke_HashLevel, Toke_False, Toke_Float, Toke_Freq, Toke_Caesura,
                   Toke_Int, Toke_NamedNoat, Toke_Fairy, Toke_String]);
        desirables.put('nouny -> musical_keyword', [Toke_QuindicesimaA, Toke_OttavaA, Toke_OttavaB, Toke_Rep, Toke_DynForte,
                   Toke_QuindicesimaB, Toke_PedalDown, Toke_Loco, Toke_PedalUp, Toke_Portamento,
                   Toke_Carrot, Toke_OctaveShift, Toke_DynFP, Toke_DynSFZ, Toke_DynPiano]);
        desirables.put('nouny -> listy', [Toke_ListS]);
        desirables.put('nouny -> deref', [Toke_Deref]);
        desirables.put('nouny -> skoarpion', [Toke_SkoarpionStart]);

        // beat
        desirables.put('beat -> Crotchets', [Toke_Crotchets]);
        desirables.put('beat -> Quavers', [Toke_Quavers]);
        desirables.put('beat -> Quarters', [Toke_Quarters]);
        desirables.put('beat -> Eighths', [Toke_Eighths]);
        desirables.put('beat -> Slash', [Toke_Slash]);

        // loop
        desirables.put('loop -> LoopS loop_body loop_condition LoopE', [Toke_LoopS]);

        // listy_entries
        desirables.put('listy_entries -> expr moar_listy_entries', [Toke_Cat, Toke_OttavaB, Toke_Symbol, Toke_Choard, Toke_Deref,
                   Toke_Caesura, Toke_OctaveShift, Toke_DynSFZ, Toke_NamedNoat, Toke_String,
                   Toke_LWing, Toke_OttavaA, Toke_False, Toke_DynForte, Toke_ListS,
                   Toke_QuindicesimaB, Toke_PedalDown, Toke_Int, Toke_Carrot, Toke_SkoarpionStart,
                   Toke_DynPiano, Toke_True, Toke_Tuplet, Toke_CondS, Toke_PedalUp,
                   Toke_CutsS, Toke_QuindicesimaA, Toke_Rep, Toke_HashLevel, Toke_Float,
                   Toke_Freq, Toke_Portamento, Toke_Loco, Toke_LoopS, Toke_DynFP,
                   Toke_Fairy]);

        // skoarpion
        desirables.put('skoarpion -> SkoarpionStart skrp_sig skrp_suffix', [Toke_SkoarpionStart]);

        // listy_suffix
        desirables.put('listy_suffix -> listy_entries ListE', [Toke_Cat, Toke_OttavaB, Toke_Symbol, Toke_Choard, Toke_Deref,
                   Toke_Caesura, Toke_OctaveShift, Toke_DynSFZ, Toke_NamedNoat, Toke_String,
                   Toke_LWing, Toke_OttavaA, Toke_False, Toke_DynForte, Toke_ListS,
                   Toke_QuindicesimaB, Toke_PedalDown, Toke_Int, Toke_Carrot, Toke_SkoarpionStart,
                   Toke_DynPiano, Toke_True, Toke_Tuplet, Toke_CondS, Toke_PedalUp,
                   Toke_CutsS, Toke_QuindicesimaA, Toke_Rep, Toke_HashLevel, Toke_Float,
                   Toke_Freq, Toke_Portamento, Toke_Loco, Toke_LoopS, Toke_DynFP,
                   Toke_Fairy]);
        desirables.put('listy_suffix -> ListE', [Toke_ListE]);

        // skrp_moar_lines
        desirables.put('skrp_moar_lines -> Newline skrp_lines', [Toke_Newline]);

        // branch
        desirables.put('branch -> optional_voice phrases Newline', [Toke_Volta, Toke_Cat, Toke_OttavaB, Toke_Symbol, Toke_Choard,
                   Toke_Deref, Toke_Caesura, Toke_Segno, Toke_OctaveShift, Toke_Slash,
                   Toke_DynSFZ, Toke_String, Toke_NamedNoat, Toke_LWing, Toke_OttavaA,
                   Toke_False, Toke_Quarters, Toke_Bars, Toke_ListS, Toke_Meter,
                   Toke_DynForte, Toke_QuindicesimaB, Toke_PedalDown, Toke_Int, Toke_Carrot,
                   Toke_SkoarpionStart, Toke_DalSegno, Toke_DynPiano, Toke_True, Toke_Newline,
                   Toke_Tuplet, Toke_Coda, Toke_DaCapo, Toke_CondS, Toke_PedalUp,
                   Toke_Comment, Toke_Eighths, Toke_CutsS, Toke_Voice, Toke_QuindicesimaA,
                   Toke_Rep, Toke_Fine, Toke_Crotchets, Toke_HashLevel, Toke_Float,
                   Toke_Quavers, Toke_Freq, Toke_Portamento, Toke_Loco, Toke_LoopS,
                   Toke_DynFP, Toke_Fairy]);

        // msg
        desirables.put('msg -> MsgNameWithArgs listy_suffix', [Toke_MsgNameWithArgs]);
        desirables.put('msg -> MsgName', [Toke_MsgName]);
        desirables.put('msg -> listy', [Toke_ListS]);
        desirables.put('msg -> loop', [Toke_LoopS]);

        // settable
        desirables.put('settable -> Caesura', [Toke_Caesura]);
        desirables.put('settable -> Symbol', [Toke_Symbol]);
        desirables.put('settable -> listy', [Toke_ListS]);
        desirables.put('settable -> Quarters', [Toke_Quarters]);
        desirables.put('settable -> Eighths', [Toke_Eighths]);
        desirables.put('settable -> Fairy', [Toke_Fairy]);

        // skrp_lines
        desirables.put('skrp_lines -> optional_voice phrases skrp_moar_lines', [Toke_Volta, Toke_Cat, Toke_OttavaB, Toke_Symbol, Toke_Choard,
                   Toke_Deref, Toke_Caesura, Toke_Segno, Toke_OctaveShift, Toke_Slash,
                   Toke_DynSFZ, Toke_String, Toke_NamedNoat, Toke_LWing, Toke_OttavaA,
                   Toke_SkoarpionEnd, Toke_False, Toke_Quarters, Toke_Bars, Toke_ListS,
                   Toke_Meter, Toke_DynForte, Toke_QuindicesimaB, Toke_PedalDown, Toke_Int,
                   Toke_Carrot, Toke_SkoarpionStart, Toke_DalSegno, Toke_DynPiano, Toke_True,
                   Toke_Newline, Toke_Tuplet, Toke_Coda, Toke_DaCapo, Toke_CondS,
                   Toke_PedalUp, Toke_Comment, Toke_Eighths, Toke_CutsS, Toke_Voice,
                   Toke_QuindicesimaA, Toke_Rep, Toke_Fine, Toke_Crotchets, Toke_HashLevel,
                   Toke_Float, Toke_Quavers, Toke_Freq, Toke_Portamento, Toke_Loco,
                   Toke_LoopS, Toke_DynFP, Toke_Fairy]);

        // loop_body
        desirables.put('loop_body -> phrases', [Toke_Volta, Toke_Cat, Toke_OttavaB, Toke_Symbol, Toke_Choard,
                   Toke_Deref, Toke_Caesura, Toke_Segno, Toke_OctaveShift, Toke_Slash,
                   Toke_DynSFZ, Toke_String, Toke_NamedNoat, Toke_LWing, Toke_OttavaA,
                   Toke_False, Toke_Quarters, Toke_Bars, Toke_ListS, Toke_Meter,
                   Toke_DynForte, Toke_QuindicesimaB, Toke_PedalDown, Toke_Int, Toke_Carrot,
                   Toke_SkoarpionStart, Toke_DalSegno, Toke_DynPiano, Toke_True, Toke_LoopSep,
                   Toke_Tuplet, Toke_Coda, Toke_DaCapo, Toke_CondS, Toke_PedalUp,
                   Toke_Comment, Toke_Eighths, Toke_CutsS, Toke_LoopE, Toke_QuindicesimaA,
                   Toke_Rep, Toke_Fine, Toke_Crotchets, Toke_HashLevel, Toke_Float,
                   Toke_Quavers, Toke_Freq, Toke_Portamento, Toke_Loco, Toke_LoopS,
                   Toke_DynFP, Toke_Fairy]);

        // al_x
        desirables.put('al_x -> AlCoda', [Toke_AlCoda]);
        desirables.put('al_x -> AlSegno', [Toke_AlSegno]);
        desirables.put('al_x -> AlFine', [Toke_AlFine]);

        // msgable
        desirables.put('msgable -> nouny msg_chain_node', [Toke_Cat, Toke_OttavaB, Toke_Symbol, Toke_Choard, Toke_Deref,
                   Toke_Caesura, Toke_OctaveShift, Toke_DynSFZ, Toke_NamedNoat, Toke_String,
                   Toke_LWing, Toke_OttavaA, Toke_False, Toke_DynForte, Toke_ListS,
                   Toke_QuindicesimaB, Toke_PedalDown, Toke_Int, Toke_Carrot, Toke_SkoarpionStart,
                   Toke_DynPiano, Toke_True, Toke_Tuplet, Toke_CondS, Toke_PedalUp,
                   Toke_CutsS, Toke_QuindicesimaA, Toke_Rep, Toke_HashLevel, Toke_Float,
                   Toke_Freq, Toke_Portamento, Toke_Loco, Toke_LoopS, Toke_DynFP,
                   Toke_Fairy]);

        // msg_chain_node
        desirables.put('msg_chain_node -> MsgOp msg msg_chain_node', [Toke_MsgOp]);

        // listy
        desirables.put('listy -> ListS listy_suffix', [Toke_ListS]);

        // boolean_expr
        desirables.put('boolean_expr -> expr', [Toke_Cat, Toke_OttavaB, Toke_Symbol, Toke_Choard, Toke_Deref,
                   Toke_Caesura, Toke_OctaveShift, Toke_DynSFZ, Toke_NamedNoat, Toke_String,
                   Toke_LWing, Toke_OttavaA, Toke_False, Toke_DynForte, Toke_ListS,
                   Toke_QuindicesimaB, Toke_PedalDown, Toke_Int, Toke_Carrot, Toke_SkoarpionStart,
                   Toke_DynPiano, Toke_True, Toke_Tuplet, Toke_CondS, Toke_PedalUp,
                   Toke_CutsS, Toke_QuindicesimaA, Toke_Rep, Toke_HashLevel, Toke_Float,
                   Toke_Freq, Toke_Portamento, Toke_Loco, Toke_LoopS, Toke_DynFP,
                   Toke_Fairy]);

        // dal_goto
        desirables.put('dal_goto -> DaCapo al_x', [Toke_DaCapo]);
        desirables.put('dal_goto -> DalSegno al_x', [Toke_DalSegno]);

        // cthulhu_prime
        desirables.put('cthulhu_prime -> boolean_expr Semicolon RWing', [Toke_Cat, Toke_OttavaB, Toke_Symbol, Toke_Choard, Toke_Deref,
                   Toke_Caesura, Toke_OctaveShift, Toke_DynSFZ, Toke_NamedNoat, Toke_String,
                   Toke_LWing, Toke_OttavaA, Toke_False, Toke_DynForte, Toke_ListS,
                   Toke_QuindicesimaB, Toke_PedalDown, Toke_Int, Toke_Carrot, Toke_SkoarpionStart,
                   Toke_DynPiano, Toke_True, Toke_Tuplet, Toke_CondS, Toke_PedalUp,
                   Toke_CutsS, Toke_QuindicesimaA, Toke_Rep, Toke_HashLevel, Toke_Float,
                   Toke_Freq, Toke_Portamento, Toke_Loco, Toke_LoopS, Toke_DynFP,
                   Toke_Fairy]);
        desirables.put('cthulhu_prime -> Nosey Semicolon RWing', [Toke_Nosey]);

        // conditional
        desirables.put('conditional -> CondS cond_ifs CondE', [Toke_CondS]);

        // phrases
        desirables.put('phrases -> phrasey phrases', [Toke_Volta, Toke_Cat, Toke_OttavaB, Toke_Symbol, Toke_Choard,
                   Toke_Deref, Toke_Caesura, Toke_Segno, Toke_OctaveShift, Toke_Slash,
                   Toke_DynSFZ, Toke_String, Toke_NamedNoat, Toke_LWing, Toke_OttavaA,
                   Toke_False, Toke_Quarters, Toke_Bars, Toke_ListS, Toke_Meter,
                   Toke_DynForte, Toke_QuindicesimaB, Toke_PedalDown, Toke_Int, Toke_Carrot,
                   Toke_SkoarpionStart, Toke_DalSegno, Toke_DynPiano, Toke_True, Toke_Tuplet,
                   Toke_Coda, Toke_DaCapo, Toke_CondS, Toke_PedalUp, Toke_Comment,
                   Toke_Eighths, Toke_CutsS, Toke_QuindicesimaA, Toke_Rep, Toke_Fine,
                   Toke_Crotchets, Toke_HashLevel, Toke_Float, Toke_Quavers, Toke_Freq,
                   Toke_Portamento, Toke_Loco, Toke_LoopS, Toke_DynFP, Toke_Fairy]);

        // assignment
        desirables.put('assignment -> AssOp settable', [Toke_AssOp]);

        // coda
        desirables.put('coda -> Coda optional_al_coda', [Toke_Coda]);

        // math
        desirables.put('math -> MathOp msgable', [Toke_MathOp]);

        // boolean
        desirables.put('boolean -> BooleanOp expr', [Toke_BooleanOp]);

        // marker
        desirables.put('marker -> Segno', [Toke_Segno]);
        desirables.put('marker -> Fine', [Toke_Fine]);
        desirables.put('marker -> coda', [Toke_Coda]);
        desirables.put('marker -> Volta', [Toke_Volta]);
        desirables.put('marker -> Bars', [Toke_Bars]);

        // dynamic
        desirables.put('dynamic -> DynPiano', [Toke_DynPiano]);
        desirables.put('dynamic -> DynForte', [Toke_DynForte]);
        desirables.put('dynamic -> DynSFZ', [Toke_DynSFZ]);
        desirables.put('dynamic -> DynFP', [Toke_DynFP]);

        // musical_keyword
        desirables.put('musical_keyword -> dynamic', [Toke_DynFP, Toke_DynSFZ, Toke_DynPiano, Toke_DynForte]);
        desirables.put('musical_keyword -> ottavas', [Toke_QuindicesimaB, Toke_QuindicesimaA, Toke_OttavaA, Toke_OttavaB, Toke_Loco,
                   Toke_OctaveShift]);
        desirables.put('musical_keyword -> pedally', [Toke_PedalDown, Toke_PedalUp]);
        desirables.put('musical_keyword -> musical_keyword_misc', [Toke_Portamento, Toke_Rep, Toke_Carrot]);

        // cond_if
        desirables.put('cond_if -> optional_voice boolean_expr CondIf if_body cond_else', [Toke_Cat, Toke_OttavaB, Toke_Symbol, Toke_Choard, Toke_Deref,
                   Toke_Caesura, Toke_OctaveShift, Toke_DynSFZ, Toke_NamedNoat, Toke_String,
                   Toke_LWing, Toke_OttavaA, Toke_False, Toke_DynForte, Toke_ListS,
                   Toke_QuindicesimaB, Toke_PedalDown, Toke_Int, Toke_Carrot, Toke_SkoarpionStart,
                   Toke_DynPiano, Toke_True, Toke_Tuplet, Toke_CondS, Toke_PedalUp,
                   Toke_CutsS, Toke_Voice, Toke_QuindicesimaA, Toke_Rep, Toke_HashLevel,
                   Toke_Float, Toke_Freq, Toke_Portamento, Toke_Loco, Toke_LoopS,
                   Toke_DynFP, Toke_Fairy]);

        // phrasey
        desirables.put('phrasey -> Comment', [Toke_Comment]);
        desirables.put('phrasey -> marker', [Toke_Volta, Toke_Fine, Toke_Coda, Toke_Segno, Toke_Bars]);
        desirables.put('phrasey -> Meter', [Toke_Meter]);
        desirables.put('phrasey -> expr', [Toke_Cat, Toke_OttavaB, Toke_Symbol, Toke_Choard, Toke_Deref,
                   Toke_Caesura, Toke_OctaveShift, Toke_DynSFZ, Toke_NamedNoat, Toke_String,
                   Toke_LWing, Toke_OttavaA, Toke_False, Toke_DynForte, Toke_ListS,
                   Toke_QuindicesimaB, Toke_PedalDown, Toke_Int, Toke_Carrot, Toke_SkoarpionStart,
                   Toke_DynPiano, Toke_True, Toke_Tuplet, Toke_CondS, Toke_PedalUp,
                   Toke_CutsS, Toke_QuindicesimaA, Toke_Rep, Toke_HashLevel, Toke_Float,
                   Toke_Freq, Toke_Portamento, Toke_Loco, Toke_LoopS, Toke_DynFP,
                   Toke_Fairy]);
        desirables.put('phrasey -> dal_goto', [Toke_DaCapo, Toke_DalSegno]);
        desirables.put('phrasey -> beat', [Toke_Quavers, Toke_Slash, Toke_Eighths, Toke_Quarters, Toke_Crotchets]);

        // cond_ifs_suffix
        desirables.put('cond_ifs_suffix -> Newline cond_ifs', [Toke_Newline]);

        // times
        desirables.put('times -> Times', [Toke_Times]);
    }

    expr {
        | parent |

        var noad = SkoarNoad.new('expr', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['expr -> msgable expr_prime'];
        // expr -> msgable expr_prime
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.msgable(noad));
            noad.add_noad(this.expr_prime(noad));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    deref {
        | parent |

        var noad = SkoarNoad.new('deref', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['deref -> Deref deref_prime'];
        // deref -> Deref deref_prime
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Deref', toker.burn(Toke_Deref));
            this.deref_prime(noad);
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    branches {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['branches -> branch branches'];
        // branches -> branch branches
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.branch(noad));
            this.branches(noad);
            deep = deep - 1;
            ^noad;
        };

        // <e>
        deep = deep - 1;
        ^noad;
    }

    optional_voice {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['optional_voice -> Voice'];
        // optional_voice -> Voice
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Voice', toker.burn(Toke_Voice));
            deep = deep - 1;
            ^noad;
        };

        // <e>
        deep = deep - 1;
        ^noad;
    }

    optional_al_coda {
        | parent |

        var noad = SkoarNoad.new('optional_al_coda', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['optional_al_coda -> AlCoda'];
        // optional_al_coda -> AlCoda
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_AlCoda', toker.burn(Toke_AlCoda));
            deep = deep - 1;
            ^noad;
        };

        // <e>
        deep = deep - 1;
        ^noad;
    }

    opt_arg_spec {
        | parent |

        var noad = SkoarNoad.new('opt_arg_spec', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['opt_arg_spec -> ArgSpec'];
        // opt_arg_spec -> ArgSpec
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_ArgSpec', toker.burn(Toke_ArgSpec));
            deep = deep - 1;
            ^noad;
        };

        // <e>
        deep = deep - 1;
        ^noad;
    }

    skoar {
        | parent |

        var noad = SkoarNoad.new('skoar', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['skoar -> branches'];
        // skoar -> branches
        if (toker.sees(desires).notNil) {
            this.branches(noad);
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    if_body {
        | parent |

        var noad = SkoarNoad.new('if_body', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['if_body -> phrases'];
        // if_body -> phrases
        if (toker.sees(desires).notNil) {
            this.phrases(noad);
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    pedally {
        | parent |

        var noad = SkoarNoad.new('pedally', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['pedally -> PedalDown'];
        // pedally -> PedalDown
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_PedalDown', toker.burn(Toke_PedalDown));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['pedally -> PedalUp'];
        // pedally -> PedalUp
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_PedalUp', toker.burn(Toke_PedalUp));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    ottavas {
        | parent |

        var noad = SkoarNoad.new('ottavas', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['ottavas -> OctaveShift'];
        // ottavas -> OctaveShift
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_OctaveShift', toker.burn(Toke_OctaveShift));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['ottavas -> OttavaA'];
        // ottavas -> OttavaA
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_OttavaA', toker.burn(Toke_OttavaA));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['ottavas -> OttavaB'];
        // ottavas -> OttavaB
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_OttavaB', toker.burn(Toke_OttavaB));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['ottavas -> QuindicesimaA'];
        // ottavas -> QuindicesimaA
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_QuindicesimaA', toker.burn(Toke_QuindicesimaA));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['ottavas -> QuindicesimaB'];
        // ottavas -> QuindicesimaB
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_QuindicesimaB', toker.burn(Toke_QuindicesimaB));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['ottavas -> Loco'];
        // ottavas -> Loco
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Loco', toker.burn(Toke_Loco));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    nouny_literal {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['nouny_literal -> Tuplet'];
        // nouny_literal -> Tuplet
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Tuplet', toker.burn(Toke_Tuplet));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny_literal -> Caesura'];
        // nouny_literal -> Caesura
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Caesura', toker.burn(Toke_Caesura));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny_literal -> Freq'];
        // nouny_literal -> Freq
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Freq', toker.burn(Toke_Freq));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny_literal -> Int'];
        // nouny_literal -> Int
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Int', toker.burn(Toke_Int));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny_literal -> Float'];
        // nouny_literal -> Float
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Float', toker.burn(Toke_Float));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny_literal -> String'];
        // nouny_literal -> String
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_String', toker.burn(Toke_String));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny_literal -> Choard'];
        // nouny_literal -> Choard
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Choard', toker.burn(Toke_Choard));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny_literal -> NamedNoat'];
        // nouny_literal -> NamedNoat
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_NamedNoat', toker.burn(Toke_NamedNoat));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny_literal -> Symbol'];
        // nouny_literal -> Symbol
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Symbol', toker.burn(Toke_Symbol));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny_literal -> Fairy'];
        // nouny_literal -> Fairy
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Fairy', toker.burn(Toke_Fairy));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny_literal -> HashLevel'];
        // nouny_literal -> HashLevel
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_HashLevel', toker.burn(Toke_HashLevel));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny_literal -> False'];
        // nouny_literal -> False
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_False', toker.burn(Toke_False));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny_literal -> True'];
        // nouny_literal -> True
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_True', toker.burn(Toke_True));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny_literal -> Cat'];
        // nouny_literal -> Cat
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Cat', toker.burn(Toke_Cat));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    skrp_sig {
        | parent |

        var noad = SkoarNoad.new('skrp_sig', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['skrp_sig -> ArgSpec SkoarpionSep'];
        // skrp_sig -> ArgSpec SkoarpionSep
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_ArgSpec', toker.burn(Toke_ArgSpec));
            noad.add_toke('Toke_SkoarpionSep', toker.burn(Toke_SkoarpionSep));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['skrp_sig -> SymbolName opt_arg_spec SkoarpionSep'];
        // skrp_sig -> SymbolName opt_arg_spec SkoarpionSep
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_SymbolName', toker.burn(Toke_SymbolName));
            noad.add_noad(this.opt_arg_spec(noad));
            noad.add_toke('Toke_SkoarpionSep', toker.burn(Toke_SkoarpionSep));
            deep = deep - 1;
            ^noad;
        };

        // <e>
        deep = deep - 1;
        ^noad;
    }

    deref_prime {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['deref_prime -> MsgNameWithArgs listy_suffix'];
        // deref_prime -> MsgNameWithArgs listy_suffix
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_MsgNameWithArgs', toker.burn(Toke_MsgNameWithArgs));
            this.listy_suffix(noad);
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['deref_prime -> MsgName'];
        // deref_prime -> MsgName
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_MsgName', toker.burn(Toke_MsgName));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    cthulhu {
        | parent |

        var noad = SkoarNoad.new('cthulhu', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['cthulhu -> LWing Semicolon cthulhu_prime'];
        // cthulhu -> LWing Semicolon cthulhu_prime
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_LWing', toker.burn(Toke_LWing));
            noad.add_toke('Toke_Semicolon', toker.burn(Toke_Semicolon));
            this.cthulhu_prime(noad);
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    cuts {
        | parent |

        var noad = SkoarNoad.new('cuts', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['cuts -> CutsS phrases CutsE'];
        // cuts -> CutsS phrases CutsE
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_CutsS', toker.burn(Toke_CutsS));
            this.phrases(noad);
            noad.add_toke('Toke_CutsE', toker.burn(Toke_CutsE));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    moar_listy_entries {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['moar_listy_entries -> ListSep listy_entries'];
        // moar_listy_entries -> ListSep listy_entries
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_ListSep', toker.burn(Toke_ListSep));
            this.listy_entries(noad);
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['moar_listy_entries -> Newline'];
        // moar_listy_entries -> Newline
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Newline', toker.burn(Toke_Newline));
            deep = deep - 1;
            ^noad;
        };

        // <e>
        deep = deep - 1;
        ^noad;
    }

    cond_ifs {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['cond_ifs -> cond_if cond_ifs_suffix'];
        // cond_ifs -> cond_if cond_ifs_suffix
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.cond_if(noad));
            this.cond_ifs_suffix(noad);
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    cond_else {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['cond_else -> CondIf if_body'];
        // cond_else -> CondIf if_body
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_CondIf', toker.burn(Toke_CondIf));
            noad.add_noad(this.if_body(noad));
            deep = deep - 1;
            ^noad;
        };

        // <e>
        deep = deep - 1;
        ^noad;
    }

    musical_keyword_misc {
        | parent |

        var noad = SkoarNoad.new('musical_keyword_misc', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['musical_keyword_misc -> Rep'];
        // musical_keyword_misc -> Rep
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Rep', toker.burn(Toke_Rep));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['musical_keyword_misc -> Portamento'];
        // musical_keyword_misc -> Portamento
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Portamento', toker.burn(Toke_Portamento));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['musical_keyword_misc -> Carrot'];
        // musical_keyword_misc -> Carrot
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Carrot', toker.burn(Toke_Carrot));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    loop_condition {
        | parent |

        var noad = SkoarNoad.new('loop_condition', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['loop_condition -> LoopSep boolean_expr'];
        // loop_condition -> LoopSep boolean_expr
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_LoopSep', toker.burn(Toke_LoopSep));
            noad.add_noad(this.boolean_expr(noad));
            deep = deep - 1;
            ^noad;
        };

        // <e>
        deep = deep - 1;
        ^noad;
    }

    expr_prime {
        | parent |

        var noad = SkoarNoad.new('expr_prime', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['expr_prime -> assignment expr_prime'];
        // expr_prime -> assignment expr_prime
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.assignment(noad));
            noad.add_noad(this.expr_prime(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['expr_prime -> math expr_prime'];
        // expr_prime -> math expr_prime
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.math(noad));
            noad.add_noad(this.expr_prime(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['expr_prime -> boolean'];
        // expr_prime -> boolean
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.boolean(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['expr_prime -> times'];
        // expr_prime -> times
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.times(noad));
            deep = deep - 1;
            ^noad;
        };

        // <e>
        deep = deep - 1;
        ^noad;
    }

    skrp_suffix {
        | parent |

        var noad = SkoarNoad.new('skrp_suffix', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['skrp_suffix -> skrp_lines SkoarpionEnd'];
        // skrp_suffix -> skrp_lines SkoarpionEnd
        if (toker.sees(desires).notNil) {
            this.skrp_lines(noad);
            noad.add_toke('Toke_SkoarpionEnd', toker.burn(Toke_SkoarpionEnd));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    nouny {
        | parent |

        var noad = SkoarNoad.new('nouny', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['nouny -> cthulhu'];
        // nouny -> cthulhu
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.cthulhu(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny -> cuts'];
        // nouny -> cuts
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.cuts(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny -> conditional'];
        // nouny -> conditional
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.conditional(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny -> loop'];
        // nouny -> loop
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.loop(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny -> nouny_literal'];
        // nouny -> nouny_literal
        if (toker.sees(desires).notNil) {
            this.nouny_literal(noad);
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny -> musical_keyword'];
        // nouny -> musical_keyword
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.musical_keyword(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny -> listy'];
        // nouny -> listy
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.listy(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny -> deref'];
        // nouny -> deref
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.deref(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['nouny -> skoarpion'];
        // nouny -> skoarpion
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.skoarpion(noad));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    beat {
        | parent |

        var noad = SkoarNoad.new('beat', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['beat -> Crotchets'];
        // beat -> Crotchets
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Crotchets', toker.burn(Toke_Crotchets));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['beat -> Quavers'];
        // beat -> Quavers
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Quavers', toker.burn(Toke_Quavers));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['beat -> Quarters'];
        // beat -> Quarters
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Quarters', toker.burn(Toke_Quarters));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['beat -> Eighths'];
        // beat -> Eighths
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Eighths', toker.burn(Toke_Eighths));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['beat -> Slash'];
        // beat -> Slash
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Slash', toker.burn(Toke_Slash));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    loop {
        | parent |

        var noad = SkoarNoad.new('loop', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['loop -> LoopS loop_body loop_condition LoopE'];
        // loop -> LoopS loop_body loop_condition LoopE
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_LoopS', toker.burn(Toke_LoopS));
            noad.add_noad(this.loop_body(noad));
            noad.add_noad(this.loop_condition(noad));
            noad.add_toke('Toke_LoopE', toker.burn(Toke_LoopE));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    listy_entries {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['listy_entries -> expr moar_listy_entries'];
        // listy_entries -> expr moar_listy_entries
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.expr(noad));
            this.moar_listy_entries(noad);
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    skoarpion {
        | parent |

        var noad = SkoarNoad.new('skoarpion', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['skoarpion -> SkoarpionStart skrp_sig skrp_suffix'];
        // skoarpion -> SkoarpionStart skrp_sig skrp_suffix
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_SkoarpionStart', toker.burn(Toke_SkoarpionStart));
            noad.add_noad(this.skrp_sig(noad));
            noad.add_noad(this.skrp_suffix(noad));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    listy_suffix {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['listy_suffix -> listy_entries ListE'];
        // listy_suffix -> listy_entries ListE
        if (toker.sees(desires).notNil) {
            this.listy_entries(noad);
            noad.add_toke('Toke_ListE', toker.burn(Toke_ListE));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['listy_suffix -> ListE'];
        // listy_suffix -> ListE
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_ListE', toker.burn(Toke_ListE));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    skrp_moar_lines {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['skrp_moar_lines -> Newline skrp_lines'];
        // skrp_moar_lines -> Newline skrp_lines
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Newline', toker.burn(Toke_Newline));
            this.skrp_lines(noad);
            deep = deep - 1;
            ^noad;
        };

        // <e>
        deep = deep - 1;
        ^noad;
    }

    branch {
        | parent |

        var noad = SkoarNoad.new('branch', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['branch -> optional_voice phrases Newline'];
        // branch -> optional_voice phrases Newline
        if (toker.sees(desires).notNil) {
            this.optional_voice(noad);
            this.phrases(noad);
            noad.add_toke('Toke_Newline', toker.burn(Toke_Newline));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    msg {
        | parent |

        var noad = SkoarNoad.new('msg', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['msg -> MsgNameWithArgs listy_suffix'];
        // msg -> MsgNameWithArgs listy_suffix
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_MsgNameWithArgs', toker.burn(Toke_MsgNameWithArgs));
            this.listy_suffix(noad);
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['msg -> MsgName'];
        // msg -> MsgName
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_MsgName', toker.burn(Toke_MsgName));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['msg -> listy'];
        // msg -> listy
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.listy(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['msg -> loop'];
        // msg -> loop
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.loop(noad));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    settable {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['settable -> Caesura'];
        // settable -> Caesura
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Caesura', toker.burn(Toke_Caesura));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['settable -> Symbol'];
        // settable -> Symbol
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Symbol', toker.burn(Toke_Symbol));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['settable -> listy'];
        // settable -> listy
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.listy(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['settable -> Quarters'];
        // settable -> Quarters
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Quarters', toker.burn(Toke_Quarters));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['settable -> Eighths'];
        // settable -> Eighths
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Eighths', toker.burn(Toke_Eighths));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['settable -> Fairy'];
        // settable -> Fairy
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Fairy', toker.burn(Toke_Fairy));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    skrp_lines {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['skrp_lines -> optional_voice phrases skrp_moar_lines'];
        // skrp_lines -> optional_voice phrases skrp_moar_lines
        if (toker.sees(desires).notNil) {
            this.optional_voice(noad);
            this.phrases(noad);
            this.skrp_moar_lines(noad);
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    loop_body {
        | parent |

        var noad = SkoarNoad.new('loop_body', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['loop_body -> phrases'];
        // loop_body -> phrases
        if (toker.sees(desires).notNil) {
            this.phrases(noad);
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    al_x {
        | parent |

        var noad = SkoarNoad.new('al_x', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['al_x -> AlCoda'];
        // al_x -> AlCoda
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_AlCoda', toker.burn(Toke_AlCoda));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['al_x -> AlSegno'];
        // al_x -> AlSegno
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_AlSegno', toker.burn(Toke_AlSegno));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['al_x -> AlFine'];
        // al_x -> AlFine
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_AlFine', toker.burn(Toke_AlFine));
            deep = deep - 1;
            ^noad;
        };

        // <e>
        deep = deep - 1;
        ^noad;
    }

    msgable {
        | parent |

        var noad = SkoarNoad.new('msgable', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['msgable -> nouny msg_chain_node'];
        // msgable -> nouny msg_chain_node
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.nouny(noad));
            this.msg_chain_node(noad);
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    msg_chain_node {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['msg_chain_node -> MsgOp msg msg_chain_node'];
        // msg_chain_node -> MsgOp msg msg_chain_node
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_MsgOp', toker.burn(Toke_MsgOp));
            noad.add_noad(this.msg(noad));
            this.msg_chain_node(noad);
            deep = deep - 1;
            ^noad;
        };

        // <e>
        deep = deep - 1;
        ^noad;
    }

    listy {
        | parent |

        var noad = SkoarNoad.new('listy', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['listy -> ListS listy_suffix'];
        // listy -> ListS listy_suffix
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_ListS', toker.burn(Toke_ListS));
            this.listy_suffix(noad);
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    boolean_expr {
        | parent |

        var noad = SkoarNoad.new('boolean_expr', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['boolean_expr -> expr'];
        // boolean_expr -> expr
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.expr(noad));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    dal_goto {
        | parent |

        var noad = SkoarNoad.new('dal_goto', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['dal_goto -> DaCapo al_x'];
        // dal_goto -> DaCapo al_x
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_DaCapo', toker.burn(Toke_DaCapo));
            noad.add_noad(this.al_x(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['dal_goto -> DalSegno al_x'];
        // dal_goto -> DalSegno al_x
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_DalSegno', toker.burn(Toke_DalSegno));
            noad.add_noad(this.al_x(noad));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    cthulhu_prime {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['cthulhu_prime -> boolean_expr Semicolon RWing'];
        // cthulhu_prime -> boolean_expr Semicolon RWing
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.boolean_expr(noad));
            noad.add_toke('Toke_Semicolon', toker.burn(Toke_Semicolon));
            noad.add_toke('Toke_RWing', toker.burn(Toke_RWing));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['cthulhu_prime -> Nosey Semicolon RWing'];
        // cthulhu_prime -> Nosey Semicolon RWing
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Nosey', toker.burn(Toke_Nosey));
            noad.add_toke('Toke_Semicolon', toker.burn(Toke_Semicolon));
            noad.add_toke('Toke_RWing', toker.burn(Toke_RWing));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    conditional {
        | parent |

        var noad = SkoarNoad.new('conditional', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['conditional -> CondS cond_ifs CondE'];
        // conditional -> CondS cond_ifs CondE
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_CondS', toker.burn(Toke_CondS));
            this.cond_ifs(noad);
            noad.add_toke('Toke_CondE', toker.burn(Toke_CondE));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    phrases {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['phrases -> phrasey phrases'];
        // phrases -> phrasey phrases
        if (toker.sees(desires).notNil) {
            this.phrasey(noad);
            this.phrases(noad);
            deep = deep - 1;
            ^noad;
        };

        // <e>
        deep = deep - 1;
        ^noad;
    }

    assignment {
        | parent |

        var noad = SkoarNoad.new('assignment', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['assignment -> AssOp settable'];
        // assignment -> AssOp settable
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_AssOp', toker.burn(Toke_AssOp));
            this.settable(noad);
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    coda {
        | parent |

        var noad = SkoarNoad.new('coda', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['coda -> Coda optional_al_coda'];
        // coda -> Coda optional_al_coda
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Coda', toker.burn(Toke_Coda));
            noad.add_noad(this.optional_al_coda(noad));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    math {
        | parent |

        var noad = SkoarNoad.new('math', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['math -> MathOp msgable'];
        // math -> MathOp msgable
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_MathOp', toker.burn(Toke_MathOp));
            noad.add_noad(this.msgable(noad));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    boolean {
        | parent |

        var noad = SkoarNoad.new('boolean', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['boolean -> BooleanOp expr'];
        // boolean -> BooleanOp expr
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_BooleanOp', toker.burn(Toke_BooleanOp));
            noad.add_noad(this.expr(noad));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    marker {
        | parent |

        var noad = SkoarNoad.new('marker', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['marker -> Segno'];
        // marker -> Segno
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Segno', toker.burn(Toke_Segno));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['marker -> Fine'];
        // marker -> Fine
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Fine', toker.burn(Toke_Fine));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['marker -> coda'];
        // marker -> coda
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.coda(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['marker -> Volta'];
        // marker -> Volta
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Volta', toker.burn(Toke_Volta));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['marker -> Bars'];
        // marker -> Bars
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Bars', toker.burn(Toke_Bars));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    dynamic {
        | parent |

        var noad = SkoarNoad.new('dynamic', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['dynamic -> DynPiano'];
        // dynamic -> DynPiano
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_DynPiano', toker.burn(Toke_DynPiano));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['dynamic -> DynForte'];
        // dynamic -> DynForte
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_DynForte', toker.burn(Toke_DynForte));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['dynamic -> DynSFZ'];
        // dynamic -> DynSFZ
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_DynSFZ', toker.burn(Toke_DynSFZ));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['dynamic -> DynFP'];
        // dynamic -> DynFP
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_DynFP', toker.burn(Toke_DynFP));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    musical_keyword {
        | parent |

        var noad = SkoarNoad.new('musical_keyword', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['musical_keyword -> dynamic'];
        // musical_keyword -> dynamic
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.dynamic(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['musical_keyword -> ottavas'];
        // musical_keyword -> ottavas
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.ottavas(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['musical_keyword -> pedally'];
        // musical_keyword -> pedally
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.pedally(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['musical_keyword -> musical_keyword_misc'];
        // musical_keyword -> musical_keyword_misc
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.musical_keyword_misc(noad));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    cond_if {
        | parent |

        var noad = SkoarNoad.new('cond_if', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['cond_if -> optional_voice boolean_expr CondIf if_body cond_else'];
        // cond_if -> optional_voice boolean_expr CondIf if_body cond_else
        if (toker.sees(desires).notNil) {
            this.optional_voice(noad);
            noad.add_noad(this.boolean_expr(noad));
            noad.add_toke('Toke_CondIf', toker.burn(Toke_CondIf));
            noad.add_noad(this.if_body(noad));
            this.cond_else(noad);
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    phrasey {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['phrasey -> Comment'];
        // phrasey -> Comment
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Comment', toker.burn(Toke_Comment));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['phrasey -> marker'];
        // phrasey -> marker
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.marker(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['phrasey -> Meter'];
        // phrasey -> Meter
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Meter', toker.burn(Toke_Meter));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['phrasey -> expr'];
        // phrasey -> expr
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.expr(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['phrasey -> dal_goto'];
        // phrasey -> dal_goto
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.dal_goto(noad));
            deep = deep - 1;
            ^noad;
        };

        desires = desirables['phrasey -> beat'];
        // phrasey -> beat
        if (toker.sees(desires).notNil) {
            noad.add_noad(this.beat(noad));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

    cond_ifs_suffix {
        | parent |

        var noad = parent;
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['cond_ifs_suffix -> Newline cond_ifs'];
        // cond_ifs_suffix -> Newline cond_ifs
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Newline', toker.burn(Toke_Newline));
            this.cond_ifs(noad);
            deep = deep - 1;
            ^noad;
        };

        // <e>
        deep = deep - 1;
        ^noad;
    }

    times {
        | parent |

        var noad = SkoarNoad.new('times', parent);
        var desires = nil;

        deep = deep + 1;
        if (deep > 100) {
            this.fail_too_deep;
        };

        desires = desirables['times -> Times'];
        // times -> Times
        if (toker.sees(desires).notNil) {
            noad.add_toke('Toke_Times', toker.burn(Toke_Times));
            deep = deep - 1;
            ^noad;
        };

        // Error State
        this.fail;
    }

}

